We use the XML component's for designing the app's interface it is provided by the Android

they have several drawbacks like:

this is provided by android so if anybody using the android's low version they cannot
access the new features for using them you have to update your android version...

in xml you have to do the many work manually like findByViewId methods and tell them how you wanna use them
you have tell them...

Now we have modern Ui kit Called the Jetpack Compose for designing the app
this is not provided by android framework it is library so you don't worry about the android version
whatever version users using they totally all function in jetpack Compose...

                How the Jetpack Compose Work ?
 unlike XML we don't have the layout file so we use the Composable functions now what's the Composable Function ?
 instead of creating the XMl layouts , you declare your Ui components in the Composable functions and
 jetpack compose handles rendering them to screen...

                          Note :
composable functions have simple terminology - Give me data then i create the Ui..
means composable function creates the Ui according to our data...


                    RECOMPOSITION....

if the data change then Jetpack compose also creates the Ui again...
this is called the recomposition..
** when the data changes over the time we call them state...
so when we calling the composable function for the first time it will called initial-composition...

if function call many times then we called them recomposition...

Jetpack Compose automatically realize that state have some changes so it's time to create the UI again...
but they don't recreate the entire Ui again means they only recreate Ui which portion made some changes...
it's help to boost our performance...
and Remember don't use any heavy task in Composable function...


Our Jetpack Compose use the Composition over the Inheritance because they don't wanna tightly coupled with
any implementation , if you work with Inheritance you don't use the any other implementation...
which is not good...
In Composition you can use many implementation just add the dependency according to your need...

For making the any function as an Composable use the @Composable annotation...
you can't preview the Interface without the @Preview Annotation...

